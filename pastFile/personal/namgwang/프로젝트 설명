[spring framework를 활용해 만들어둔 프로젝트 설명]

프로젝트 구성은 부스트코스를 기반으로 만들었기 때문에
이해가 안되는 부분은 해당 강의를 보면 이해하실 수 있습니다.

핵심은 
3. 웹 앱 개발:예약서비스 1/4 의
7. Spring Core
8. Spring JDBC
9. Spring MVC
10. 레이어드 아키텍처
입니다.

1. pom.xml
빌드/배포와 관련된 모든 설정을 담고있고
Maven이라는 유틸리티에서 메타 정보로 사용하는 설정 파일.

https://www.edwith.org/boostcourse-web/lecture/16723/
**Maven
정의)
애플리케이션을 개발하기 위해 반복적으로 진행했던 작업들을 지원하기 위해 등장한 도구로
빌드, 패키징, 문서화, 테스트와 테스트 리포팅, git, 의존성관리,
svn등과 같은 형상관리서버와 연동(SCMs), 배포 등의 작업을 손쉽게 할 수 있다.
Maven을 이해하려면 CoC를 먼저 이해하는 게 필요.
CoC(Convention over Configuration)는 일종의 관습을 말하는데
소스파일이 어느 위치에 있고, 소스가 컴파일된 파일들은 어떤 위치에 있어야 하고 등을 미리 정해놓은 것이다. 
관습에 익숙한 사용자라면 Maven을 쉽게 사용할 수 있다.
Maven을 사용한다는 것은 CoC에 대해 알아나가는 거라고도 말할 수 있다.

이점)
-의존성 라이브러리 관리 가능.
pom.xml에 사용하고자 하는 라이브러리에 대해 적어주면
다운받거나 하지 않아도 사용할 수 있다.
-일관된 방식의 빌드 수행.
-다양한 플러그인 제공으로 많은 일들을 자동화.

2. web.xml
웹과 관련된 설정(리스너, 애플리케이션 파라미터, 서블릿 설정, 필터 설정 등)
을 담고 있고 tomcat에서는 web.xml이고 웹 컨테이너마다 이름은 다르다고 함.
https://okky.kr/article/258166

3. src/main/java에 쓰는 내용들
1)config - config 클래스를 가지고 있다.
(1) ApplicationConfig - 전체적으로 관리하는 config
사용 애노테이션: @Configuration
-> 스프링 설정 클래스를 선언하는 애노테이션
@ComponentScan(basePackages = { "kr.or.multi.multiCommunity.dao", "kr.or.multi.multiCommunity.service"})
-> @Controller, @Service, @Repository, @Component 애노테이션이 붙은 클래스를 찾아 컨테이너에 등록.
으로 basePackages에 
dao와 service를 설정해줬다.
@Import({ DBConfig.class })

(2) DBConfig - DB관련 config
사용 애노테이션: @Configuration,
@EnableTransactionManagement,
->DataSourceTransactionManager 빈을 찾아 Transaction Manager로 사용.
출처: https://offbyone.tistory.com/381 [쉬고 싶은 개발자]

(3) WebMvcContextConfiguration - web mvc 관련 config
사용 애노테이션: @Configuration, @EnableWebMvc,
@ComponentScan(basePackages = { "kr.or.multi.multiCommunity.controller" })

**JDBC
Java Database Connectivity
-자바를 이용한 데이터베이스 접속과 sql 문장의 실행,
그리고 실행 결과로 얻어진 데이터의 핸들링을 제공하는 방법과 절차에 관한 규약
-자바 프로그램 내에서 sql문을 실행하기 위한 자바 api
-sql과 프로그래밍 언어의 통합 접근 중 한 형태
-java는 표준 인터페이스인 JDBC API를 제공으로
-데이터베이스 벤더, 또는 기타 써드파티에서는 JDBC 인터페이스를 구현한 드라이버를 제공.

JDBC를 이용한 프로그래밍 방법)
1. import java.sql.*;
2. 드라이버 로드
3. Connection 객체 생성
4. Statement 객체 생성 및 질의 수행
5. sql문에 결과물이 있다면 ResultSet 객체 생성
6. 모든 객체 닫기.
후에 Spring JDBC를 통해 반복적으로 처리하는 요소들을 하지 않아도 되게 된다.

**MVC(Model View Controller)
-Model: 뷰가 렌더링하는데 필요한 데이터.
사용자가 요청한 상품 목록이나 주문 내역 등.
-View: 실제로 보이는 부분. 모델을 사용해 렌더링한다.
jsp, jpf, pdf, xml 등으로 결과 표현.
-Controller: 사용자의 액션에 응답하는 컴포넌트.
모델을 업데이트하고 다른 액션을 수행한다.

**Dispatcher Servlet
Dispatcher Servlet은 Front Controller로
클라이언트의 모든 요청을 받은 후 이를 처리한 핸들러에게 넘기고
핸들러가 처리한 결과를 받아 사용자에게 응답결과를 보여준다.
web.xml에서 설정해준다.

2)controller - controller 클래스를 가지고 있다.
사용 애노테이션: @Controller
(1) AdminController - 관리자가 하는 일에 대한 controller
(2) LockerController - 사물함 신청과 관련한 controller
(3) LoginController - 로그인과 관련한 controller
(4) MTController - MT신청과 관련한 controller
(5) MultiCommunityController - 화면 이동 등과 관련한 controller

3)dao
Data Access Object
데이터를 조회하거나 조작하는 기능을 전담하도록 만든 객체.
보통 데이터베이스를 조작하는 기능을 전담하는 목적으로 만들어진다.

Dao에 @Repository 애노테이션을 붙이고
Sqls에는 사용하고자 하는 sql문을 작성함.
(1)AdminDao - admin 데이터베이스 조작 메서드 정의
(2)AdminDaoSqls - admin 데이터베이스에서 사용할 sql문 정의
(3)ImgDataDao - img 데이터베이스에 조작 메서드 정의
(4)ImgDataDaoSqls - img 데이터베이스에서 사용할 sql문 정의
(5)LockerDao - locker 테이터베이스 조작 메서드 정의
(6)LockerDaoSqls - locker 데이터베이스에서 사용할 sql문 정의
(7)MTdao - mt 데이터베이스 조작 메서드 정의
(8)MTDaoSqls - mt 데이터베이스에서 사용할 sql문 정의
(9)StudentDao - student 데이터베이스 조작 메서드 정의
(10)StudentDaoSqls - student 데이터베이스에서 사용할 sql문 정의

4)dto
DTO( Data Transfer Object)
-계층간 데이터 교환을 위한 자바 Beans.
-여기서의 계층은 컨트롤러 뷰,
비지니스 계층, 퍼시스턴스 계층을 의미
-순수한 데이터 객체

**Bean
일반적 java 클래스를 말하며 기본 생성자를 가지고 있고
필드는 private 하게 선언하고
getName, SetName 메소드를 name 프로퍼티라고 부른다.

(1)Admin - admin 데이터베이스의 요소 정의
(2)ImgData - img 데이터베이스의 요소 정의
(3)Locker - locker 데이터베이스의 요소 정의
(4)MT - mt 데이터베이스의 요소 정의
(5)Student - student 데이터베이스의 요소 정의

5)service - interface로 impl에서 구현한다.
(1)AdminService - AdminDao의 메서드를 사용해 admin 데이터베이스 조작
(2)ImgDataService - ImgDataDao의 메서드를 사용해 img 데이터베이스 조작
(3)LockerService - LockerDao의 메서드를 사용해 locker 데이터베이스 조작
(4)MTService - MTDao의 메서드를 사용해 mt 데이터베이스 조작
(5)StudentService - StudentDao의 메서드를 사용해 student 데이터베이스 조작

6)service.impl - service 인터페이스를 구현한다.
사용 애노테이션: @Service
(1)AdminServiceImpl
(2)ImgDataServiceImpl
(3)LockerServiceImpl
(4)MTServiceImpl
(5)StudentServiceImpl

**Spring JDBC 사용하는 방법.
1. dto로 객체를 만든다.
2. sqls를 쓴다 
3. dao에서 메소드를 작성하고 sql문을 사용한다.
4. serviceimpl에서 dao의 함수를 사용한다.
5. controller에서 service의 함수를 사용한다.

**layered architecture
presentation 레이어 -> controller 객체가 동작한다.
service 레이어 -> service 객체가 동작한다. 
repository 레이어 -> dao 객체가 있어 service 객체가 가져다 쓴다.
이 아키텍처로 만들려고 그렇게 애노테이션 쓰면서 분리해서 하는 거라고
생각해도 되는건지..?
